name: Deploy Production ðŸš€

on:
  release:
    types:
      - published
      - edited

jobs:
  deploy-production:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    environment: production

    steps:
      # Step 1: Checkout Repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Run Deployment Script via SSH
      - name: Deploy to Production Server via SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.SSH_HOST_PRODUCTION }}
          username: ${{ secrets.SSH_USER_NAME_PRODUCTION }}
          key: ${{ secrets.SSH_PRIVATE_KEY_PRODUCTION }}
          port: ${{ secrets.APP_PROD_PORT }}
          script: |
            # Check if APP_PROD_PATH exists
            if [ -d "${{ vars.APP_PROD_PATH }}" ]; then
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              cd ${{ secrets.APP_PROD_PATH }}"
              sudo docker compose down pacmusic-prod
              git pull origin main
            else
              ssh-keyscan github.com >> ~/.ssh/known_hosts
              git clone ${{ secrets.GIT_URL }} "${{ vars.APP_PROD_PATH }}"
              cd "${{ vars.APP_PROD_PATH }}"
            fi

            # Generate .env file
            echo "APP_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/pacmusic" > .env
            echo "APP_TAG=${{ github.event.release.tag_name }}" >> .env
            echo "APP_PROD_PORT=${{ secrets.APP_PROD_PORT }}" >> .env
            echo "MINIO_PROD_ENDPOINT=${{ secrets.MINIO_PROD_ENDPOINT }}" >> .env
            echo "MINIO_PROD_ACCESS_KEY=${{ secrets.MINIO_PROD_ACCESS_KEY }}" >> .env
            echo "MINIO_PROD_SECRET_KEY=${{ secrets.MINIO_PROD_SECRET_KEY }}" >> .env

            # Build and start the application
            sudo docker compose up --build --detach pacmusic-prod

      # Step 3: Test Endpoint
      - name: Test Production Endpoint
        run: |
          curl -f ${{ secrets.PROD_URL }}
